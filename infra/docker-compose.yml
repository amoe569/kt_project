version: '3.8'

services:
  # Spring Boot 애플리케이션
  control-center:
    build:
      context: ../control-center
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DATABASE_URL=jdbc:postgresql://db:5432/cctv_control
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=password
    depends_on:
      - db
    volumes:
      - recordings:/recordings
    networks:
      - cctv-network

  # Python AI Detector
  detector:
    build:
      context: ../detector
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - API_BASE=http://control-center:8080
      - CAMERA_ID=cam-001
      - SCORE_THRESHOLD=0.5
    volumes:
      - ../detector/videos:/app/videos
      - recordings:/recordings
    networks:
      - cctv-network
    depends_on:
      - control-center

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cctv_control
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../control-center/src/main/resources/db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - cctv-network

  # Redis (선택사항 - 캐싱용)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - cctv-network

volumes:
  postgres_data:
  recordings:

networks:
  cctv-network:
    driver: bridge
